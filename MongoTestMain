package com.boot.demo;

import com.google.gson.Gson;
import com.mongodb.*;
import com.mongodb.MongoClient;
import com.mongodb.client.*;
import com.mongodb.client.model.Filters;
import org.bson.Document;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class MongoBaseTest {

    public static void main(String[] a) {

        MongoClientOptions.Builder builder = MongoClientOptions.builder();
//最大连接数
        builder.connectionsPerHost(1);
//最小连接数
        builder.minConnectionsPerHost(0);
//超时时间
        builder.connectTimeout(1000 * 3);
// 一个线程成功获取到一个可用数据库之前的最大等待时间
        builder.maxWaitTime(5000);
//此参数跟connectionsPerHost的乘机为一个线程变为可用的最大阻塞数，超过此乘机数之后的所有线程将及时获取一个异常.eg.connectionsPerHost=10 and threadsAllowedToBlockForConnectionMultiplier=5,最多50个线程等级一个链接，推荐配置为5
        builder.threadsAllowedToBlockForConnectionMultiplier(1);
//最大空闲时间
        builder.maxConnectionIdleTime(1000 * 10);
//设置池连接的最大生命时间。
        builder.maxConnectionLifeTime(1000 * 10);
//连接超时时间
        builder.socketTimeout(1000 * 10);
        MongoClientOptions myOptions = builder.build();

        List<ServerAddress> addresss = new ArrayList<ServerAddress>();
        addresss.add(new ServerAddress("localhost", 27017));
        addresss.add(new ServerAddress("localhost", 27017));

        //  ------- - - - - -           建立链接    >>>>>>>   ------ - - ----- - - -    --------------------
        MongoCredential mongoCredential = MongoCredential.createCredential("root", "admin", "root".toCharArray());// 安全验证

        MongoClient mongoClient = new MongoClient(addresss, mongoCredential, myOptions);
        //  ------- - - - - -           建立链接    <<<<<<<<   ------ - - ----- - - -    --------------------


        MongoIterable<String> mongoIterable = mongoClient.listDatabaseNames();
        System.out.println(" ---------- 测试获取表明  -----------  " + new Gson().toJson(mongoIterable));//  测试获取表名

        MongoDatabase mongoDataBase = mongoClient.getDatabase("demo"); // 获取数据库，或者切换数据库

        MongoIterable<String> mongoIterables = mongoDataBase.listCollectionNames();
        System.out.println(" ----------  测试获取表明   -----------  " + new Gson().toJson(mongoIterables)); //  测试获取表名


        // ------- - - - - - - - -     无条件查询   >>>>>>>>>   - - - - --- - - -- - - - - ----------------
        MongoCollection<Document> collection = mongoDataBase.getCollection("demoCollectionTable");
        MongoCollection<Map> tCollection = mongoDataBase.getCollection("demoCollectionTable", Map.class);

        FindIterable<Document> findDocument = collection.find();
        System.out.println(" ----------  看看变成string是什么样子   -----------  " + findDocument.toString()); //  看看变成string是什么样子
        MongoCursor<Document> documentCursor = findDocument.iterator();
        while (documentCursor.hasNext()) {
            System.out.println(" ----------  documentCursor 111  -----------  " + documentCursor.next());
        }

        FindIterable<Map> documentMap = tCollection.find();
        System.out.println(" ----------  看看变成string是什么样子  22 -----------  " + documentMap.toString()); //  看看变成string是什么样子
        MongoCursor<Map> mongoCursorMap = documentMap.iterator();
        while (mongoCursorMap.hasNext()) {
            System.out.println(" ----------  documentMap  22 -----------  " + mongoCursorMap.next());
        }
        // ------- - - - - - - - -     无条件查询查询   <<<<<<<<<   - - - - --- - - -- - - - - ----------------

        // ------- - - - - - - - -     条件查询，当是 单个id等于谁是就变成单个查询了。   >>>>>>>>>   - - - - --- - - -- - - - - ----------------

        FindIterable<Map>  oneObjMap =  tCollection.find(new BasicDBObject("name","user1"));
        FindIterable<Map>  oneDocumentMap =  tCollection.find(new Document("name","user1"));
        FindIterable<Map>  oneObjName =  tCollection.find(Filters.eq("name", "张三"));
        FindIterable<Map>  oneObjEq =  tCollection.find(Filters.eq("name", new Document("$eq",24)));

        BasicDBObject queryObject = new BasicDBObject("name","user1");
        FindIterable<Map>  oneMap =  tCollection.find(queryObject);

        DBObject dbQuery = new BasicDBObject();  //  大于 5 ，小于 14
        dbQuery.put("$gt", 5);
        dbQuery.put("$lt", 14);
        DBObject query = new BasicDBObject("age",dbQuery);

        // ------- - - - - - - - -     单个查询   <<<<<<<<<   - - - - --- - - -- - - - - ----------------


        // ------- - - - - - - - -     像狗屎一样的查询方式，循环拼接   >>>>>>>>>   - - - - --- - - -- - - - - ----------------
        BasicDBObject doc5 = new BasicDBObject();
        doc5.put("index", 3);
        doc5.put("status", 0);
        //doc5.put("url", "{$regex:'2016'}");错误的写法
        BasicDBObject doc3 = new BasicDBObject();
        doc3.put("$regex", "2016");
        doc5.put("url", doc3);
        FindIterable<Map> find333445 = tCollection.find(doc5);
        // ------- - - - - - - - -     像狗屎一样的查询方式，循环拼接   <<<<<<<<<   - - - - --- - - -- - - - - ----------------

    }

}
